@using System.IO
@using Azure.Core
@using Microsoft.Graph

@inject TeamsFx teamsfx
@inject TeamsUserCredential teamsUserCredential

<div>
    <h2>Get the user's profile photo</h2>
    @if (NeedConsent)
    {
        <p>Click below to authorize this app to read your profile photo using Microsoft Graph.</p>
        <FluentButton Appearance="Appearance.Accent" Disabled="@IsLoading" @onclick="ConsentAndShow">Authorize</FluentButton>
    }
    @if (IsLoading)
    {
        <ProfileCard IsLoading="true" />
    }
    else if (!string.IsNullOrEmpty(@ErrorMessage))
    {
        <div class="error">@ErrorMessage</div>
    }
    else if (Profile != null)
    {
        <ProfileCard IsLoading="false" Profile="@Profile" UserPhotoUri="@UserPhotoUri" />

        <h1>@Profile.Id</h1>

        <FluentButton Appearance="Appearance.Accent" Disabled="@IsLoading" @onclick="SendMessageToChannel">Send message to Teams Channel</FluentButton>

        @*<FluentButton Appearance="Appearance.Accent" Disabled="@IsLoading" @onclick="TestTranscript">Test Transcript</FluentButton>*@

    }
</div>

@code {
    [Parameter]
    public string ErrorMessage { get; set; }

    public bool IsLoading { get; set; }
    public bool NeedConsent { get; set; }
    public User Profile { get; set; }
    public string UserPhotoUri { get; set; }

    private readonly string _scope = "User.Read";
    private readonly string _mscope = "Group.ReadWrite.All";

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        if (await HasPermission(_scope))
        {
            await ShowProfile();
        }
    }

    private async Task ShowProfile()
    {
        IsLoading = true;
        var graph = GetGraphServiceClient();

        Profile = await graph.Me.Request().GetAsync();
        UserPhotoUri = await GetPhotoAsync(graph);

        IsLoading = false;
        ErrorMessage = string.Empty;
    }

    private async Task ConsentAndShow()
    {
        try
        {
            await teamsUserCredential.LoginAsync(_scope);
            NeedConsent = false;
            await ShowProfile();
        }
        catch (ExceptionWithCode e)
        {
            ErrorMessage = e.Message;
        }
    }


    private async Task SendMessageToChannel()
    {
        try
        {
            await teamsUserCredential.LoginAsync(_mscope);
            NeedConsent = false;

            // Code snippets are only available for the latest version. Current version is 5.x

            var graphClient = GetGraphServiceClient();

            var requestBody = new ChatMessage
                {
                    Body = new ItemBody
                    {
                        Content = "Hello world From Teams",
                    },
                };
            var result = await graphClient.Teams["0e5c4741-13ba-4bc6-b3d5-304596ad2b66"].Channels["19:HLnNQDgls3OINyM5cmQExreFb2J5N-gf9JtJWRcd2cc1@thread.tacv2"].Messages.Request().AddAsync(requestBody);

            await ShowProfile();
        }
        catch (ExceptionWithCode e)
        {
            ErrorMessage = e.Message;
        }
    }

    //private async Task SendTranscript()
    //{
    //    try
    //    {
    //        await teamsUserCredential.LoginAsync(_mscope);
    //        NeedConsent = false;

    //        // Code snippets are only available for the latest version. Current version is 5.x

    //        var graphClient = GetGraphServiceClient();

    //        var result = await graphClient.Users["{user-id}"].OnlineMeetings["{onlineMeeting-id}"].Transcripts.GetAsync();

    //        var requestBody = new ChatMessage
    //            {
    //                Body = new ItemBody
    //                {
    //                    Content = "Hello world From Teams",
    //                },
    //            };
    //        var result = await graphClient.Teams["0e5c4741-13ba-4bc6-b3d5-304596ad2b66"].Channels["19:HLnNQDgls3OINyM5cmQExreFb2J5N-gf9JtJWRcd2cc1@thread.tacv2"].Messages.Request().AddAsync(requestBody);

    //        await ShowProfile();
    //    }
    //    catch (ExceptionWithCode e)
    //    {
    //        ErrorMessage = e.Message;
    //    }
    //}

    private async Task<bool> HasPermission(string scope)
    {
        IsLoading = true;
        try
        {
            await teamsUserCredential.GetTokenAsync(new TokenRequestContext(new string[] { _scope }), new System.Threading.CancellationToken());
            return true;
        }
        catch (ExceptionWithCode e)
        {
            if (e.Code == ExceptionCode.UiRequiredError)
            {
                NeedConsent = true;
            }
            else
            {
                ErrorMessage = e.Message;
            }

        }
        IsLoading = false;
        return false;
    }
    
    private GraphServiceClient GetGraphServiceClient()
    {
        var msGraphAuthProvider = new MsGraphAuthProvider(teamsUserCredential, _scope);
        var client = new GraphServiceClient(msGraphAuthProvider);
        return client;
    }

    private async Task<string> GetPhotoAsync(GraphServiceClient graph)
    {
        string userPhoto = "";
        try
        {
            var photoStream = await graph.Me.Photo.Content.Request().GetAsync();

            if (photoStream != null)
            {
                // Copy the photo stream to a memory stream
                // to get the bytes out of it
                var memoryStream = new MemoryStream();
                photoStream.CopyTo(memoryStream);
                var photoBytes = memoryStream.ToArray();

                // Generate a data URI for the photo
                userPhoto = $"data:image/png;base64,{Convert.ToBase64String(photoBytes)}";
            }
        }
        catch (Exception) { /* Unable to get the users photo */ }

        return userPhoto;
    }


}
